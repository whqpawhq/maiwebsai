const fetch = require("node-fetch");

module.exports = async (req, res) => {
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  try {
    const { message } = req.body;

    if (!message) {
      return res.status(400).json({ error: "Thi·∫øu tin nh·∫Øn" });
    }

    const apiKey = process.env.OPENAI_API_KEY;
    if (!apiKey) {
      return res.status(500).json({ error: "Ch∆∞a c·∫•u h√¨nh OPENAI_API_KEY" });
    }

    // g·ªçi API OpenAI
    const response = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${apiKey}`,
      },
      body: JSON.stringify({
        model: "gpt-4o-mini", // model nh·∫π, nhanh
        messages: [
          { role: "system", content: "B·∫°n l√† chatbot th√¢n thi·ªán, tr·∫£ l·ªùi ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu." },
          { role: "user", content: message },
        ],
      }),
    });

    const data = await response.json();
    console.log("üîπ OpenAI tr·∫£ v·ªÅ:", data);

    if (data.error) {
      return res.status(500).json({ error: data.error.message });
    }

    const reply = data.choices?.[0]?.message?.content?.trim() || "‚ö†Ô∏è Kh√¥ng c√≥ ph·∫£n h·ªìi";
    return res.status(200).json({ reply });
  } catch (err) {
    console.error("‚ùå L·ªói server:", err);
    return res.status(500).json({ error: err.message });
  }
};
